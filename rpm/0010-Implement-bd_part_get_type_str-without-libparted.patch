From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Vojtech Trefny <vtrefny@redhat.com>
Date: Thu, 1 Nov 2018 13:07:19 +0100
Subject: [PATCH] Implement 'bd_part_get_type_str' without libparted

There unfortunately isn't a function to get these "names" from
libfdisk so we need to hardcode it in libblockdev.
---
 src/plugins/part.c | 18 +++++++++++++++++-
 tests/part_test.py | 14 ++++++++++++++
 2 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/src/plugins/part.c b/src/plugins/part.c
index 0d96b68..1514dce 100644
--- a/src/plugins/part.c
+++ b/src/plugins/part.c
@@ -115,6 +115,19 @@ void bd_part_disk_spec_free (BDPartDiskSpec *data) {
 /* "C" locale to get the locale-agnostic error messages */
 static locale_t c_locale = (locale_t) 0;
 
+/* base 2 logarithm of x */
+static gint log2i (guint x) {
+    gint ret = 0;
+
+    if (x == 0)
+        return -1;
+
+    while (x >>= 1)
+        ret++;
+
+    return ret;
+}
+
 /**
  * get_part_num: (skip)
  *
@@ -2219,6 +2232,9 @@ const gchar* bd_part_get_flag_str (BDPartFlag flag, GError **error) {
     return NULL;
 }
 
+/* string for BD_PART_TYPE_PROTECTED is "primary", that's what parted returns... */
+static const gchar* const part_types[6] = { "primary", "logical", "extended", "free", "metadata", "primary" };
+
 /**
  * bd_part_get_type_str:
  * @type: type to get string representation for
@@ -2234,5 +2250,5 @@ const gchar* bd_part_get_type_str (BDPartType type, GError **error) {
         return NULL;
     }
 
-    return ped_partition_type_get_name ((PedPartitionType) type);
+    return part_types[log2i (type) + 1];
 }
diff --git a/tests/part_test.py b/tests/part_test.py
index dcbd963..f160097 100644
--- a/tests/part_test.py
+++ b/tests/part_test.py
@@ -1432,3 +1432,17 @@ class PartSetGptFlagsCase(PartTestCase):
         ps = BlockDev.part_get_part_spec (self.loop_dev, ps.path)
         self.assertTrue(ps.flags & BlockDev.PartFlag.LEGACY_BOOT)
         self.assertEqual(ps.type_guid, esp_guid)
+
+class PartNoDevCase(PartTestCase):
+
+    def setUp(self):
+        # no devices needed for this test case
+        pass
+
+    def test_part_type_str(self):
+        types = {BlockDev.PartType.NORMAL: 'primary', BlockDev.PartType.LOGICAL: 'logical',
+                 BlockDev.PartType.EXTENDED: 'extended', BlockDev.PartType.FREESPACE: 'free',
+                 BlockDev.PartType.METADATA: 'metadata', BlockDev.PartType.PROTECTED: 'primary'}
+
+        for key, value in types.items():
+            self.assertEqual(BlockDev.part_get_type_str(key), value)
-- 
2.33.1


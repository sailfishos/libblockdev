From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Vojtech Trefny <vtrefny@redhat.com>
Date: Fri, 2 Oct 2020 15:52:17 +0200
Subject: [PATCH] Add separate tool for VFAT filesystem resize and use it in
 the FS plugin

This way we can remove compile time dependency on libparted from
libblockdev and still support VFAT resize.
---
 .gitignore                 |   1 +
 configure.ac               |   8 +--
 dist/libblockdev.spec.in   |   6 +-
 src/plugins/Makefile.am    |  13 ----
 src/plugins/fs.c           |   4 --
 src/plugins/fs/Makefile.am |   4 +-
 src/plugins/fs/generic.c   |   2 +-
 src/plugins/fs/vfat.c      | 121 ++++++-------------------------------
 src/plugins/part_err.h     |  10 ---
 tests/run_tests.py         |   1 +
 tools/Makefile.am          |   7 ++-
 11 files changed, 36 insertions(+), 141 deletions(-)
 delete mode 100644 src/plugins/part_err.h

diff --git a/.gitignore b/.gitignore
index 43ff93a..2328f0a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -54,3 +54,4 @@ docs/html/
 docs/libblockdev-docs.xml
 dist/libblockdev.spec
 tools/lvm-cache-stats
+tools/vfat-resize
diff --git a/configure.ac b/configure.ac
index 494c86c..f14edcc 100644
--- a/configure.ac
+++ b/configure.ac
@@ -196,8 +196,6 @@ LIBBLOCKDEV_PLUGIN([FS], [fs])
 LIBBLOCKDEV_PLUGIN([NVDIMM], [nvdimm])
 LIBBLOCKDEV_PLUGIN([VDO], [vdo])
 
-AM_CONDITIONAL(WITH_PART_O_WITH_FS, test "x$with_part" != "xno" -o "x$with_fs" != "xno")
-
 dnl these two modules are always needed
 LIBBLOCKDEV_PKG_CHECK_MODULES([GLIB], [glib-2.0 >= 2.42.2])
 LIBBLOCKDEV_PKG_CHECK_MODULES([GOBJECT], [gobject-2.0 >= 2.42.2])
@@ -237,9 +235,11 @@ AS_IF([test "x$with_fs" != "xno"],
       [LIBBLOCKDEV_PKG_CHECK_MODULES([MOUNT], [mount >= 2.23.0])
        # new versions of libmount has some new functions we can use
        AS_IF([$PKG_CONFIG --atleast-version=2.30.0 mount],
-             [AC_DEFINE([LIBMOUNT_NEW_ERR_API])], [])
+             [AC_DEFINE([LIBMOUNT_NEW_ERR_API])], [])]
+      [])
 
-       LIBBLOCKDEV_PKG_CHECK_MODULES([PARTED], [libparted >= 3.1])
+AS_IF([test "x$with_tools" != "xno"],
+      [LIBBLOCKDEV_PKG_CHECK_MODULES([PARTED], [libparted >= 3.1])
 
        # older versions of parted don't provide the libparted-fs-resize.pc file
        AS_IF([$PKG_CONFIG libparted-fs-resize],
diff --git a/dist/libblockdev.spec.in b/dist/libblockdev.spec.in
index 7f91b02..a26227c 100644
--- a/dist/libblockdev.spec.in
+++ b/dist/libblockdev.spec.in
@@ -310,7 +310,6 @@ with the libblockdev-dm plugin/library.
 
 %if %{with_fs}
 %package fs
-BuildRequires: parted-devel
 BuildRequires: libblkid-devel
 BuildRequires: libmount-devel
 Summary:     The FS plugin for the libblockdev library
@@ -497,7 +496,6 @@ with the libblockdev-nvdimm plugin/library.
 
 %if %{with_part}
 %package part
-BuildRequires: parted-devel
 BuildRequires: libfdisk-devel
 Summary:     The partitioning plugin for the libblockdev library
 Requires: %{name}-utils%{?_isa} >= 0.11
@@ -582,6 +580,7 @@ Summary:    Various nice tools based on libblockdev
 Requires:   %{name}
 Requires:   %{name}-lvm
 BuildRequires: libbytesize-devel
+BuildRequires: parted-devel
 %if %{with_lvm_dbus} == 1
 Recommends: %{name}-lvm-dbus
 %endif
@@ -790,11 +789,9 @@ find %{buildroot} -type f -name "*.la" | xargs %{__rm}
 
 %files utils
 %{_libdir}/libbd_utils.so.*
-%{_libdir}/libbd_part_err.so.*
 
 %files utils-devel
 %{_libdir}/libbd_utils.so
-%{_libdir}/libbd_part_err.so
 %{_libdir}/pkgconfig/blockdev-utils.pc
 %dir %{_includedir}/blockdev
 %{_includedir}/blockdev/utils.h
@@ -965,6 +962,7 @@ find %{buildroot} -type f -name "*.la" | xargs %{__rm}
 %if %{with_tools}
 %files tools
 %{_bindir}/lvm-cache-stats
+%{_bindir}/vfat-resize
 %endif
 
 %ifarch s390 s390x
diff --git a/src/plugins/Makefile.am b/src/plugins/Makefile.am
index 09a23f0..ee6053b 100644
--- a/src/plugins/Makefile.am
+++ b/src/plugins/Makefile.am
@@ -48,10 +48,6 @@ if WITH_KBD
 lib_LTLIBRARIES += libbd_kbd.la
 endif
 
-if WITH_PART_O_WITH_FS
-lib_LTLIBRARIES += libbd_part_err.la
-endif
-
 if WITH_PART
 lib_LTLIBRARIES += libbd_part.la
 endif
@@ -181,13 +177,6 @@ libbd_part_la_CPPFLAGS = -I${builddir}/../../include/
 libbd_part_la_SOURCES = part.c part.h check_deps.c check_deps.h
 endif
 
-if WITH_PART_O_WITH_FS
-libbd_part_err_la_CFLAGS = $(GLIB_CFLAGS) $(PARTED_CFLAGS) $(PARTED_FS_CFLAGS) -Wall -Wextra -Werror
-libbd_part_err_la_LIBADD = ${builddir}/../utils/libbd_utils.la $(GLIB_LIBS) $(PARTED_LIBS) $(PARTED_FS_LIBS)
-libbd_part_err_la_LDFLAGS = -L${srcdir}/ -version-info 2:0:0 -Wl,--no-undefined
-libbd_part_err_la_CPPFLAGS = -I${builddir}/../../include/
-libbd_part_err_la_SOURCES = part_err.c part_err.h
-endif
 
 if WITH_VDO
 libbd_vdo_la_CFLAGS = $(GLIB_CFLAGS) $(BYTESIZE_CFLAGS) $(YAML_CFLAGS) -Wall -Wextra -Werror
@@ -248,8 +237,6 @@ if WITH_FS
 libinclude_HEADERS += fs.h
 endif
 
-noinst_HEADERS = part_err.h
-
 if WITH_S390
 libinclude_HEADERS += s390.h
 endif
diff --git a/src/plugins/fs.c b/src/plugins/fs.c
index 1729fc0..93ac49e 100644
--- a/src/plugins/fs.c
+++ b/src/plugins/fs.c
@@ -18,9 +18,6 @@
  */
 
 #include <blockdev/utils.h>
-#include <blockdev/part_err.h>
-
-#include <parted/parted.h>
 
 #include <check_deps.h>
 #include "fs.h"
@@ -93,7 +90,6 @@ gboolean bd_fs_check_deps (void) {
  *
  */
 gboolean bd_fs_init (void) {
-    ped_exception_set_handler ((PedExceptionHandler*) bd_exc_handler);
     return TRUE;
 }
 
diff --git a/src/plugins/fs/Makefile.am b/src/plugins/fs/Makefile.am
index 191b16b..daa5826 100644
--- a/src/plugins/fs/Makefile.am
+++ b/src/plugins/fs/Makefile.am
@@ -2,8 +2,8 @@ AUTOMAKE_OPTIONS = subdir-objects
 
 lib_LTLIBRARIES = libbd_fs.la
 
-libbd_fs_la_CFLAGS   = $(GLIB_CFLAGS) $(BLKID_CFLAGS) $(PARTED_CFLAGS) $(PARTED_FS_CFLAGS) $(MOUNT_CFLAGS) -Wall -Wextra -Werror
-libbd_fs_la_LIBADD   = ${builddir}/../../utils/libbd_utils.la ${builddir}/../libbd_part_err.la $(GLIB_LIBS) $(BLKID_LIBS) $(PARTED_LIBS) $(PARTED_FS_LIBS) $(MOUNT_LIBS)
+libbd_fs_la_CFLAGS   = $(GLIB_CFLAGS) $(GIO_CFLAGS) $(BLKID_CFLAGS) $(MOUNT_CFLAGS) $(UUID_CFLAGS) -Wall -Wextra -Werror
+libbd_fs_la_LIBADD   = ${builddir}/../../utils/libbd_utils.la $(GLIB_LIBS) $(GIO_LIBS) $(BLKID_LIBS) $(MOUNT_LIBS) $(UUID_LIBS)
 libbd_fs_la_LDFLAGS	 = -L${srcdir}/../../utils/ -version-info 2:0:0 -Wl,--no-undefined
 libbd_fs_la_CPPFLAGS = -I${builddir}/../../../include/ -I${srcdir}/../
 libbd_fs_la_SOURCES  = ../check_deps.c ../check_deps.h \
diff --git a/src/plugins/fs/generic.c b/src/plugins/fs/generic.c
index eb6b556..99a30c2 100644
--- a/src/plugins/fs/generic.c
+++ b/src/plugins/fs/generic.c
@@ -67,7 +67,7 @@ const BDFSInfo fs_info[] = {
     {"ext2", "e2fsck", "e2fsck", "resize2fs", BD_FS_ONLINE_GROW | BD_FS_OFFLINE_GROW | BD_FS_OFFLINE_SHRINK, "tune2fs"},
     {"ext3", "e2fsck", "e2fsck", "resize2fs", BD_FS_ONLINE_GROW | BD_FS_OFFLINE_GROW | BD_FS_OFFLINE_SHRINK, "tune2fs"},
     {"ext4", "e2fsck", "e2fsck", "resize2fs", BD_FS_ONLINE_GROW | BD_FS_OFFLINE_GROW | BD_FS_OFFLINE_SHRINK, "tune2fs"},
-    {"vfat", "fsck.vfat", "fsck.vfat", "", BD_FS_OFFLINE_GROW | BD_FS_OFFLINE_SHRINK, "fatlabel"},
+    {"vfat", "fsck.vfat", "fsck.vfat", "vfat-resize", BD_FS_OFFLINE_GROW | BD_FS_OFFLINE_SHRINK, "fatlabel"},
     {"ntfs", "ntfsfix", "ntfsfix", "ntfsresize", BD_FS_OFFLINE_GROW | BD_FS_OFFLINE_SHRINK, "ntfslabel"},
     {NULL, NULL, NULL, NULL, 0, NULL}
 };
diff --git a/src/plugins/fs/vfat.c b/src/plugins/fs/vfat.c
index 6cb8253..778cf3d 100644
--- a/src/plugins/fs/vfat.c
+++ b/src/plugins/fs/vfat.c
@@ -18,11 +18,11 @@
  */
 
 #include <blockdev/utils.h>
-#include <blockdev/part_err.h>
 #include <check_deps.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#include <stdio.h>
 
 #include "vfat.h"
 #include "fs.h"
@@ -37,18 +37,26 @@ static GMutex deps_check_lock;
 #define DEPS_FATLABEL_MASK (1 << DEPS_FATLABEL)
 #define DEPS_FSCKVFAT 2
 #define DEPS_FSCKVFAT_MASK (1 << DEPS_FSCKVFAT)
+#define DEPS_RESIZEVFAT 3
+#define DEPS_RESIZEVFAT_MASK (1 << DEPS_RESIZEVFAT)
 
-#define DEPS_LAST 3
+#define DEPS_LAST 4
 
 static const UtilDep deps[DEPS_LAST] = {
     {"mkfs.vfat", NULL, NULL, NULL},
     {"fatlabel", NULL, NULL, NULL},
     {"fsck.vfat", NULL, NULL, NULL},
+    {"vfat-resize", NULL, NULL, NULL},
 };
 
 static guint32 fs_mode_util[BD_FS_MODE_LAST+1] = {
-    /*   mkfs          wipe     check               repair                set-label            query          resize */
-    DEPS_MKFSVFAT_MASK, 0, DEPS_FSCKVFAT_MASK, DEPS_FSCKVFAT_MASK,   DEPS_FATLABEL_MASK,  DEPS_FSCKVFAT_MASK,  0
+    DEPS_MKFSVFAT_MASK,   /* mkfs */
+    0,                    /* wipe */
+    DEPS_FSCKVFAT_MASK,   /* check */
+    DEPS_FSCKVFAT_MASK,   /* repair */
+    DEPS_FATLABEL_MASK,   /* set-label */
+    DEPS_FSCKVFAT_MASK,   /* query */
+    DEPS_RESIZEVFAT_MASK /* resize */
 };
 
 #define UNUSED __attribute__((unused))
@@ -113,30 +121,6 @@ void bd_fs_vfat_info_free (BDFSVfatInfo *data) {
     g_free (data);
 }
 
-/**
- * set_parted_error: (skip)
- *
- * Set error from the parted error stored in 'error_msg'. In case there is none,
- * the error is set up with an empty string. Otherwise it is set up with the
- * parted's error message and is a subject to later g_prefix_error() call.
- *
- * Returns: whether there was some message from parted or not
- */
-static gboolean set_parted_error (GError **error, BDFsError type) {
-    gchar *error_msg = NULL;
-    error_msg = bd_get_error_msg ();
-    if (error_msg) {
-        g_set_error (error, BD_FS_ERROR, type,
-                     " (%s)", error_msg);
-        g_free (error_msg);
-        error_msg = NULL;
-        return TRUE;
-    } else {
-        g_set_error_literal (error, BD_FS_ERROR, type, "");
-        return FALSE;
-    }
-}
-
 /**
  * bd_fs_vfat_mkfs:
  * @device: the device to create a new vfat fs on
@@ -337,83 +321,16 @@ BDFSVfatInfo* bd_fs_vfat_get_info (const gchar *device, GError **error) {
  * Tech category: %BD_FS_TECH_VFAT-%BD_FS_TECH_MODE_RESIZE
  */
 gboolean bd_fs_vfat_resize (const gchar *device, guint64 new_size, GError **error) {
-    PedDevice *ped_dev = NULL;
-    PedGeometry geom = ZERO_INIT;
-    PedGeometry new_geom = ZERO_INIT;
-    PedFileSystem *fs = NULL;
-    PedSector start = 0;
-    PedSector length = 0;
-    gint status = 0;
-    guint64 progress_id = 0;
-    gchar *msg = NULL;
-
-    msg = g_strdup_printf ("Started resizing vfat filesystem on the device '%s'", device);
-    progress_id = bd_utils_report_started (msg);
-    g_free (msg);
-
-    ped_dev = ped_device_get (device);
-    if (!ped_dev) {
-        g_set_error (error, BD_FS_ERROR, BD_FS_ERROR_FAIL,
-                     "Failed to get ped device for the device '%s'", device);
-        bd_utils_report_finished (progress_id, (*error)->message);
-        return FALSE;
-    }
+    g_autofree gchar *size_str = NULL;
+    const gchar *args[4] = {"vfat-resize", device, NULL, NULL};
 
-    status = ped_device_open (ped_dev);
-    if (status == 0) {
-        g_set_error (error, BD_FS_ERROR, BD_FS_ERROR_FAIL,
-                     "Failed to get open the device '%s'", device);
-        bd_utils_report_finished (progress_id, (*error)->message);
+    if (!check_deps (&avail_deps, DEPS_RESIZEVFAT_MASK, deps, DEPS_LAST, &deps_check_lock, error))
         return FALSE;
-    }
 
-    status = ped_geometry_init (&geom, ped_dev, start, ped_dev->length);
-    if (status == 0) {
-        g_set_error (error, BD_FS_ERROR, BD_FS_ERROR_FAIL,
-                     "Failed to initialize geometry for the device '%s'", device);
-        ped_device_close (ped_dev);
-        bd_utils_report_finished (progress_id, (*error)->message);
-        return FALSE;
+    if (new_size != 0) {
+        size_str = g_strdup_printf ("%"G_GUINT64_FORMAT, new_size);
+        args[2] = size_str;
     }
 
-    fs = ped_file_system_open(&geom);
-    if (!fs) {
-        g_set_error (error, BD_FS_ERROR, BD_FS_ERROR_FAIL,
-                     "Failed to read the filesystem on the device '%s'", device);
-        ped_device_close (ped_dev);
-        bd_utils_report_finished (progress_id, (*error)->message);
-        return FALSE;
-    }
-
-    if (new_size == 0)
-        length = ped_dev->length;
-    else
-        length = (PedSector) ((PedSector) new_size / ped_dev->sector_size);
-
-    status = ped_geometry_init(&new_geom, ped_dev, start, length);
-    if (status == 0) {
-        g_set_error (error, BD_FS_ERROR, BD_FS_ERROR_FAIL,
-                     "Failed to initialize new geometry for the filesystem on '%s'", device);
-        ped_file_system_close (fs);
-        ped_device_close (ped_dev);
-        bd_utils_report_finished (progress_id, (*error)->message);
-        return FALSE;
-    }
-
-    status = ped_file_system_resize(fs, &new_geom, NULL);
-    if (status == 0) {
-        set_parted_error (error, BD_FS_ERROR_FAIL);
-        g_prefix_error (error, "Failed to resize the filesystem on '%s'", device);
-        ped_file_system_close (fs);
-        ped_device_close (ped_dev);
-        bd_utils_report_finished (progress_id, (*error)->message);
-        return FALSE;
-    }
-
-    ped_file_system_close (fs);
-    ped_device_close (ped_dev);
-    bd_utils_report_finished (progress_id, "Completed");
-
-    return TRUE;
-
+    return bd_utils_exec_and_report_error (args, NULL, error);
 }
diff --git a/src/plugins/part_err.h b/src/plugins/part_err.h
deleted file mode 100644
index 737ccef..0000000
--- a/src/plugins/part_err.h
+++ /dev/null
@@ -1,10 +0,0 @@
-#include <glib.h>
-#include <parted/parted.h>
-
-#ifndef BD_UTILS_PARTED
-#define BD_UTILS_PARTED
-
-PedExceptionOption bd_exc_handler (PedException *ex);
-gchar * bd_get_error_msg (void);
-
-#endif /* BD_UTILS_PARTED */
diff --git a/tests/run_tests.py b/tests/run_tests.py
index 65c5529..4069712 100644
--- a/tests/run_tests.py
+++ b/tests/run_tests.py
@@ -198,6 +198,7 @@ if __name__ == '__main__':
             os.environ['LD_LIBRARY_PATH'] = LIBDIRS
             os.environ['GI_TYPELIB_PATH'] = GIDIR
             os.environ['LIBBLOCKDEV_CONFIG_DIR'] = os.path.join(testdir, 'default_config')
+            os.environ['PATH'] += ':' + os.path.join(projdir, 'tools')
 
             try:
                 pyver = 'python3' if six.PY3 else 'python'
diff --git a/tools/Makefile.am b/tools/Makefile.am
index e81c184..06e46d2 100644
--- a/tools/Makefile.am
+++ b/tools/Makefile.am
@@ -1,8 +1,13 @@
 if WITH_TOOLS
-bin_PROGRAMS = lvm-cache-stats
+bin_PROGRAMS = lvm-cache-stats vfat-resize
 
 lvm_cache_stats_CFLAGS   = $(GLIB_CFLAGS) $(BYTESIZE_CFLAGS) -Wall -Wextra -Werror
 lvm_cache_stats_CPPFLAGS = -I${builddir}/../include/
 lvm_cache_stats_LDFLAGS  = -Wl,--no-undefined
 lvm_cache_stats_LDADD    = ${builddir}/../src/lib/libblockdev.la $(GLIB_LIBS) $(BYTESIZE_LIBS)
+
+vfat_resize_CFLAGS   = $(GLIB_CFLAGS) $(BYTESIZE_CFLAGS) $(PARTED_CFLAGS) $(PARTED_FS_CFLAGS) -Wall -Wextra -Werror
+vfat_resize_CPPFLAGS = -I${builddir}/../include/
+vfat_resize_LDFLAGS  = -Wl,--no-undefined
+vfat_resize_LDADD    = ${builddir}/../src/lib/libblockdev.la $(GLIB_LIBS) $(BYTESIZE_LIBS) $(PARTED_LIBS) $(PARTED_FS_LIBS)
 endif
-- 
2.33.1

